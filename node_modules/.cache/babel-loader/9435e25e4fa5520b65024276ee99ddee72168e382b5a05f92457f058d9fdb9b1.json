{"ast":null,"code":"var _jsxFileName = \"/Users/rsahani/Documents/RAHUL/PROJECT V-Anime/v-anime1/src/pages/WatchAnime.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../main.css';\nimport MY_Navbar2 from '../components/Navbar_2';\nimport ThemeToggleButton from '../components/toggleTheme';\nimport './WatchAnime.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport Wavy from '../components/wavy_loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Watch() {\n  _s();\n  const location = useLocation();\n  const [Query, setQuery] = useState(\"Naruto\");\n  const [animeList, setAnimeList] = useState({});\n  const [WatchUrl, setWatchUrl] = useState(\"\");\n  const [Server, setServer] = useState(\"Streamsb\");\n  const [ServerList, setServerList] = useState([]);\n  const [TotalEP, setTotalEP] = useState(1);\n  const [EP, setEP] = useState(1);\n  const [DownloadLink, setDownloadLink] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [EpLoaded, setEpLoaded] = useState(false);\n  const [page, setPage] = useState(1);\n  const episodesPerPage = 50;\n  const startIndex = (page - 1) * episodesPerPage;\n  const endIndex = startIndex + episodesPerPage;\n  const handlePrevPage = () => {\n    if (page > 1) {\n      setPage(page - 1);\n    }\n  };\n  const handleNextPage = () => {\n    const numPages = Math.ceil(animeList.episodes.length / episodesPerPage);\n    if (page < numPages) {\n      setPage(page + 1);\n    }\n  };\n  const handleThemeToggle = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  function handleChange(que) {\n    setQuery(que);\n  }\n  const handleLinkClick = episodeId => {\n    fetchAnime(episodeId);\n  };\n  const handleServerClick = (episodeId, server) => {\n    console.log(\"EP ID & Server: \" + episodeId + server);\n    fetchAnime(episodeId, \"\", server);\n  };\n  const fetchEpisodes = async query => {\n    setEpLoaded(false);\n    const response = await fetch(`https://api.consumet.org/anime/gogoanime/info/${query}`);\n    const data = await response.json();\n    const animeList = data;\n    setAnimeList(animeList);\n    const TotalEP = await animeList.totalEpisodes;\n    setTotalEP(TotalEP);\n    // console.log(animeList);\n    // console.log(\"TITLE: \" + animeList.title);\n    // console.log(\"Total Ep: \" + TotalEP);\n    // console.log(\"Episode : \" + animeList.episodes[0].id);\n    setEP(animeList.episodes[0].id);\n    setEpLoaded(true);\n  };\n  const fetchDownloadLink = async query_id => {\n    const response = await fetch(`https://api.consumet.org/anime/gogoanime/watch/${query_id}`);\n    const data = await response.json();\n    const DownloadLink = data.download;\n    setDownloadLink(DownloadLink);\n  };\n  const fetchAnime = async (Que, Epi_No, Server) => {\n    let syntext = Que + \"-\" + Epi_No;\n    // console.log(\"TEXT\" + syntext);\n    setDataLoaded(false);\n    let server_data;\n    if (Epi_No) {\n      const servers = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${syntext}`);\n      server_data = await servers.json();\n      const ServerList = server_data;\n      setServerList(ServerList);\n      fetchDownloadLink(syntext);\n    } else {\n      const response = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${Que}`);\n      server_data = await response.json();\n      const ServerList = server_data;\n      setServerList(ServerList);\n      fetchDownloadLink(Que);\n    }\n    for (let index = 0; index < server_data.length; index++) {\n      let ele = server_data[index];\n      if (ele.name == Server) {\n        const WatchUrl = server_data[index].url;\n        setWatchUrl(WatchUrl);\n        console.log(\"FOUND: \" + ele.name + \" \" + Server);\n      } else {\n        const WatchUrl = server_data[0].url;\n        setWatchUrl(WatchUrl);\n        console.log(ele.name + \" \" + Server);\n      }\n    }\n    setDataLoaded(true);\n  };\n  const fetchQuery = async (Que, Epi_No) => {\n    let syntext = Que + \"-episode\" + Epi_No;\n    setDataLoaded(false);\n    const servers = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${syntext}`);\n    const server_data = await servers.json();\n    const WatchUrl = server_data[2].url;\n    setWatchUrl(WatchUrl);\n    setDataLoaded(true);\n  };\n\n  // const formattedQuery = Query.replace(/\\s+/g, \"-\").toLowerCase(); \n  // console.log(formattedQuery); // \"attack-on-titan\"\n\n  useEffect(() => {\n    const Query = new URLSearchParams(location.search).get(\"query\");\n    const EP = new URLSearchParams(location.search).get(\"ep\");\n    let newQuery;\n    let newEpID;\n    if (!Query) {\n      newQuery = Query;\n      newEpID = EP.split(\"-episode\")[1];\n      newQuery = EP.split(\"-episode\")[0];\n      setQuery(newQuery);\n      fetchEpisodes(newQuery);\n      console.log(\"NEW ID: \", newQuery);\n      console.log(\"NEW EP: \", newEpID);\n    } else {\n      setQuery(Query);\n      fetchEpisodes(Query);\n      console.log(\"ID ELSE: \", Query);\n    }\n    setEP(EP);\n    console.log(\"ID: \", newQuery);\n    if (EP && newQuery) {\n      console.log(\"FETCH QUERY\");\n      fetchQuery(newQuery, newEpID);\n    } else if (EP) {\n      fetchAnime(Query, EP);\n    }\n  }, []);\n\n  // if (!dataLoaded) {\n  //     return <Wavy />;\n  // } else {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app`,\n    children: [/*#__PURE__*/_jsxDEV(MY_Navbar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", animeList.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevPage,\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Page \", page, \" of \", animeList.episodes ? Math.ceil(animeList.episodes.length / episodesPerPage) : 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [animeList.episodes && animeList.episodes.slice(startIndex, endIndex).map((episode, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"episode\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              className: \"link\"\n              // to={`/watch/${episode.id}`}\n              ,\n              to: {\n                pathname: '/watch',\n                search: `?ep=${episode.id}`\n              },\n              onClick: () => handleLinkClick(episode.id),\n              children: episode.id.split(\"-\").pop()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this)), !EpLoaded && /*#__PURE__*/_jsxDEV(Wavy, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), dataLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"servers\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Server List: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this), ServerList && ServerList.map((Sname, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"server-list\",\n              onClick: () => handleServerClick(EP, Sname.name),\n              children: Sname.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Download-Link\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: DownloadLink,\n              target: '_blank',\n              className: 'buttonDownload',\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this), !dataLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '910px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Wavy, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"desc\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: animeList.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n}\n// }\n_s(Watch, \"5PPtA0PS0Vpl2o8+rdWMw7HiREo=\", false, function () {\n  return [useLocation];\n});\n_c = Watch;\nexport default Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useState","useEffect","MY_Navbar2","ThemeToggleButton","Link","useLocation","Wavy","Watch","location","Query","setQuery","animeList","setAnimeList","WatchUrl","setWatchUrl","Server","setServer","ServerList","setServerList","TotalEP","setTotalEP","EP","setEP","DownloadLink","setDownloadLink","isDarkMode","setIsDarkMode","dataLoaded","setDataLoaded","EpLoaded","setEpLoaded","page","setPage","episodesPerPage","startIndex","endIndex","handlePrevPage","handleNextPage","numPages","Math","ceil","episodes","length","handleThemeToggle","handleChange","que","handleLinkClick","episodeId","fetchAnime","handleServerClick","server","console","log","fetchEpisodes","query","response","fetch","data","json","totalEpisodes","id","fetchDownloadLink","query_id","download","Que","Epi_No","syntext","server_data","servers","index","ele","name","url","fetchQuery","URLSearchParams","search","get","newQuery","newEpID","split","title","slice","map","episode","pathname","pop","Sname","width","description"],"sources":["/Users/rsahani/Documents/RAHUL/PROJECT V-Anime/v-anime1/src/pages/WatchAnime.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../main.css';\nimport MY_Navbar2 from '../components/Navbar_2';\nimport ThemeToggleButton from '../components/toggleTheme';\nimport './WatchAnime.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport Wavy from '../components/wavy_loader';\n\nfunction Watch() {\n    const location = useLocation()\n\n    const [Query, setQuery] = useState(\"Naruto\");\n    const [animeList, setAnimeList] = useState({});\n    const [WatchUrl, setWatchUrl] = useState(\"\");\n\n    const [Server, setServer] = useState(\"Streamsb\");\n    const [ServerList, setServerList] = useState([]);\n\n    const [TotalEP, setTotalEP] = useState(1);\n    const [EP, setEP] = useState(1);\n\n    const [DownloadLink, setDownloadLink] = useState(\"\");\n\n    const [isDarkMode, setIsDarkMode] = useState(false);\n    const [dataLoaded, setDataLoaded] = useState(false);\n    const [EpLoaded, setEpLoaded] = useState(false);\n\n    const [page, setPage] = useState(1);\n    const episodesPerPage = 50;\n    const startIndex = (page - 1) * episodesPerPage;\n    const endIndex = startIndex + episodesPerPage;\n\n    const handlePrevPage = () => {\n        if (page > 1) {\n            setPage(page - 1);\n        }\n    };\n\n    const handleNextPage = () => {\n        const numPages = Math.ceil(animeList.episodes.length / episodesPerPage);\n        if (page < numPages) {\n            setPage(page + 1);\n        }\n    };\n\n\n    const handleThemeToggle = () => {\n        setIsDarkMode(!isDarkMode);\n    };\n\n    function handleChange(que) {\n        setQuery(que);\n    }\n\n    const handleLinkClick = (episodeId) => {\n        fetchAnime(episodeId);\n    };\n    \n    const handleServerClick = (episodeId, server) => {\n        console.log(\"EP ID & Server: \" + episodeId + server)\n        fetchAnime(episodeId, \"\", server);\n    };\n\n\n    const fetchEpisodes = async (query) => {\n        setEpLoaded(false);\n        const response = await fetch(`https://api.consumet.org/anime/gogoanime/info/${query}`)\n        const data = await response.json();\n        const animeList = data;\n        setAnimeList(animeList);\n        const TotalEP = await animeList.totalEpisodes;\n        setTotalEP(TotalEP);\n        // console.log(animeList);\n        // console.log(\"TITLE: \" + animeList.title);\n        // console.log(\"Total Ep: \" + TotalEP);\n        // console.log(\"Episode : \" + animeList.episodes[0].id);\n        setEP(animeList.episodes[0].id)\n        setEpLoaded(true);\n    };\n\n\n    const fetchDownloadLink = async (query_id) => {\n        const response = await fetch(`https://api.consumet.org/anime/gogoanime/watch/${query_id}`)\n        const data = await response.json(); \n        const DownloadLink = data.download;\n        setDownloadLink(DownloadLink);\n    };\n\n    const fetchAnime = async (Que, Epi_No, Server) => {\n        let syntext = Que + \"-\" + Epi_No;\n        // console.log(\"TEXT\" + syntext);\n        setDataLoaded(false);\n        let server_data;\n\n        if (Epi_No) {\n            const servers = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${syntext}`)\n            server_data = await servers.json();\n\n            const ServerList = server_data;\n            setServerList(ServerList);\n            fetchDownloadLink(syntext);\n            \n        } else {\n            const response = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${Que}`)\n            server_data = await response.json();\n\n\n            const ServerList = server_data;\n            setServerList(ServerList);\n            fetchDownloadLink(Que);\n        }\n\n        for (let index = 0; index < server_data.length; index++) {\n            let ele = server_data[index];\n            if (ele.name == Server) {\n                const WatchUrl = server_data[index].url;\n                setWatchUrl(WatchUrl);\n                console.log( \"FOUND: \" + ele.name + \" \" + Server)\n            }\n            else{\n                const WatchUrl = server_data[0].url;\n                setWatchUrl(WatchUrl);\n                console.log(ele.name + \" \" + Server)\n                \n            }\n\n        }\n\n        setDataLoaded(true);\n    };\n\n    const fetchQuery = async (Que, Epi_No) => {\n        let syntext = Que + \"-episode\" + Epi_No;\n        setDataLoaded(false);\n        const servers = await fetch(`https://api.consumet.org/anime/gogoanime/servers/${syntext}`)\n        const server_data = await servers.json();\n        const WatchUrl = server_data[2].url;\n        setWatchUrl(WatchUrl);\n        setDataLoaded(true);\n    };\n\n\n\n\n    // const formattedQuery = Query.replace(/\\s+/g, \"-\").toLowerCase(); \n    // console.log(formattedQuery); // \"attack-on-titan\"\n\n\n    useEffect(() => {\n        const Query = new URLSearchParams(location.search).get(\"query\");\n        const EP = new URLSearchParams(location.search).get(\"ep\");\n        let newQuery;\n        let newEpID;\n        if (!Query) {\n            newQuery = Query;\n            newEpID = EP.split(\"-episode\")[1];\n            newQuery = EP.split(\"-episode\")[0];\n            setQuery(newQuery);\n            fetchEpisodes(newQuery);\n            console.log(\"NEW ID: \", newQuery);\n            console.log(\"NEW EP: \", newEpID);\n        } else {\n            setQuery(Query);\n            fetchEpisodes(Query);\n            console.log(\"ID ELSE: \", Query);\n        }\n\n        setEP(EP);\n\n        console.log(\"ID: \", newQuery);\n        if (EP && newQuery) {\n            console.log(\"FETCH QUERY\");\n            fetchQuery(newQuery, newEpID);\n        }\n        else if (EP) {\n            fetchAnime(Query, EP);\n        }\n    }, []);\n\n\n    // if (!dataLoaded) {\n    //     return <Wavy />;\n    // } else {\n    return (\n        <div className={`app`}>\n            <MY_Navbar2 />\n            <div>\n\n                <h1> {animeList.title}</h1>\n\n                <div className='pagination'>\n                    <button onClick={handlePrevPage}>Prev</button>\n\n                    <span>\n                        Page {page} of {animeList.episodes ? Math.ceil(animeList.episodes.length / episodesPerPage) : 0}\n                    </span>\n\n                    <button onClick={handleNextPage}>Next</button>\n                </div>\n                <div className='main-content'>\n                    <div className='content' >\n\n                        {animeList.episodes && animeList.episodes.slice(startIndex, endIndex).map((episode, index) => (\n                            <div className='episode' key={index} >\n                                <Link\n                                    className='link'\n                                    // to={`/watch/${episode.id}`}\n                                    to={{\n\n                                        pathname: '/watch',\n                                        search: `?ep=${episode.id}`\n                                    }}\n                                    onClick={() => handleLinkClick(episode.id)}\n                                >\n                                    {episode.id.split(\"-\").pop()}\n                                </Link>\n                            </div>\n                        ))}\n                        {!EpLoaded && (\n                            <Wavy />\n                        )\n\n                        }\n\n\n                    </div>\n                    {dataLoaded && (\n                        <div className='video'>\n                            {/* <iframe src={WatchUrl} width={\"860px\"} height={\"500px\"} allow=\"fullscreen\" className='video-inside'></iframe> */}\n                            <div className='servers'>\n                                <h3>Server List: </h3>\n                            {ServerList && ServerList.map((Sname, index) => (\n                                <div className='server-list' key={index} onClick={() => handleServerClick(EP, Sname.name)}>\n                                    {Sname.name}\n                                    </div>\n                                ))}\n                            </div>\n                            <div className='Download-Link'>\n                                <a href={DownloadLink} target={'_blank'} className={'buttonDownload'}>Download</a>\n                                </div>\n                        </div>\n                    )}\n                    {!dataLoaded && (\n                        <div style={{ width: '910px' }}>\n                            <Wavy />\n                        </div>\n                    )}\n                    <div className='desc'>\n                        <p >\n                            {animeList.description}\n                        </p>\n                    </div>\n                </div>\n            </div>\n\n        </div >\n    );\n}\n// }\n\nexport default Watch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}